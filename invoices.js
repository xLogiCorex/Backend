const express = require('express');
const PDFDocument = require('pdfkit');
const router = express.Router();
const dbHandler = require('./dbHandler');
const authenticateJWT = require('./authenticateJWT');
const authorizeRole = require('./authorizeRole');

// GET /invoices ‚Äì sz√°ml√°k list√°z√°sa jogosults√°g alapj√°n
router.get('/invoices', authenticateJWT(), authorizeRole(['admin', 'sales']), async (req, res) => {
  try {
    const where = {};

    if (req.user.role === 'sales') {
      where.userId = req.user.id;
    }

    const invoices = await dbHandler.invoiceTable.findAll({
      where,
      order: [['issueDate', 'DESC']]
    });

    // Partner nevek hozz√°ad√°sa manu√°lisan
    const invoicesWithPartnerNames = await Promise.all(
      invoices.map(async (invoice) => {
        const partner = await dbHandler.partnerTable.findByPk(invoice.partnerId, {
          attributes: ['name']
        });
        return {
          ...invoice.toJSON(),
          partnerName: partner ? partner.name : 'Ismeretlen partner'
        };
      })
    );

    res.status(200).json(invoicesWithPartnerNames);
  } catch (error) {
    res.status(500).json({ message: "Szerverhiba", error: error.message });
  }
});

// GET /invoices/:id ‚Äì egy sz√°mla lek√©r√©se
router.get('/invoices/:id', authenticateJWT(), authorizeRole(['admin', 'sales']), async (req, res) => {
  try {
    const invoiceId = req.params.id;

    // Sz√°mla lek√©r√©se
    const invoice = await dbHandler.invoiceTable.findByPk(invoiceId);
    
    if (!invoice) {
      return res.status(404).json({ message: 'Nem tal√°lhat√≥ a sz√°mla.' });
    }

    // Jogosults√°g ellen≈ërz√©s
    if (req.user.role === 'sales' && invoice.userId !== req.user.id) {
      return res.status(403).json({ message: 'Nincs jogosults√°god ehhez a sz√°ml√°hoz.' });
    }

    // Partner adatok lek√©r√©se
    const partner = await dbHandler.partnerTable.findByPk(invoice.partnerId);
    // Rendel√©s adatok lek√©r√©se
    const order = await dbHandler.orderTable.findByPk(invoice.orderId);

    const response = {
      ...invoice.toJSON(),
      partner: partner || {},
      order: order ? { orderNumber: order.orderNumber } : {}
    };

    res.status(200).json(response);
  } catch (error) {
    res.status(500).json({ message: 'Szerverhiba', error: error.message });
  }
});

// GET /invoices/:id/pdf ‚Äì PDF sz√°mla gener√°l√°s √©s let√∂lt√©s
router.get('/invoices/:id/pdf', /*authenticateJWT(), authorizeRole(['admin', 'sales']),*/ async (req, res) => {
  console.log("üìÑ PDF endpoint elindult, ID:", req.params.id);
  try {
    console.log("PDF lek√©r√©s ID:", req.params.id);

    const invoiceId = req.params.id;

    // Sz√°mla lek√©r√©se
    const invoice = await dbHandler.invoiceTable.findByPk(invoiceId);
    
    if (!invoice) {
      return res.status(404).json({ message: 'Nem tal√°lhat√≥ a sz√°mla.' });
    }

    // Jogosults√°g ellen≈ërz√©s
    /*if (req.user.role === 'sales' && invoice.userId !== req.user.id) {
      return res.status(403).json({ message: 'Nincs jogosults√°god ehhez a sz√°ml√°hoz.' });
    }*/

    // Partner adatok lek√©r√©se
    const partner = await dbHandler.partnerTable.findByPk(invoice.partnerId);
    // Rendel√©s adatok lek√©r√©se
    const order = await dbHandler.orderTable.findByPk(invoice.orderId);

    // PDF l√©trehoz√°sa
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename=szamla_${invoice.invoiceNumber}.pdf`);
    doc.pipe(res);

    // Fejl√©c
    doc.fontSize(20).text('Sz√°mla', { align: 'center' }).moveDown();

    // Sz√°mla adatok
    doc.fontSize(12)
        .text(`Sz√°mla sz√°m: ${invoice.invoiceNumber}`)
        .text(`Rendel√©s sz√°m: ${order ? order.orderNumber : 'Ismeretlen'}`)
        .text(`Kibocs√°t√°s d√°tuma: ${new Date(invoice.issueDate).toLocaleDateString('hu-HU')}`)
        .text(`√ñsszeg (nett√≥): ${invoice.totalNet.toLocaleString('hu-HU')} Ft`)
        .text(`√ÅFA (27%): ${invoice.totalVAT.toLocaleString('hu-HU')} Ft`)
        .text(`√ñsszeg (brutt√≥): ${invoice.totalGross.toLocaleString('hu-HU')} Ft`)
        .moveDown();

    // Partner adatok
    doc.fontSize(14).text('Partner adatok:', { underline: true }).moveDown();
    if (partner) {
      doc.fontSize(12)
          .text(`N√©v: ${partner.name}`)
          .text(`Ad√≥sz√°m: ${partner.taxNumber}`)
          .text(`C√≠m: ${partner.address}`)
          .text(`Kapcsolattart√≥: ${partner.contactPerson}`)
          .text(`Email: ${partner.email}`)
          .text(`Telefon: ${partner.phone}`);
    }
    doc.moveDown();

    // Sz√°mla t√©telek
    doc.fontSize(14).text('Sz√°mla t√©telek:', { underline: true }).moveDown();

    // T√°bl√°zat fejl√©c
    doc.fontSize(12)
        .text('Term√©k', 50, doc.y, { continued: true })
        .text('Mennyis√©g', 250, doc.y, { continued: true })
        .text('Egys√©g√°r', 350, doc.y, { continued: true })
        .text('√ñsszeg', 450, doc.y);
    doc.moveDown();

    // T√©telek
    let yPos = doc.y;
    const items = Array.isArray(invoice.items) ? invoice.items : JSON.parse(invoice.items || '[]');
    
    items.forEach(item => {
      doc.text(item.productName || item.name || 'Ismeretlen term√©k', 50, yPos, { continued: true })
          .text((item.quantity || item.qty || 0).toString(), 250, yPos, { continued: true })
          .text((item.unitPrice || 0).toLocaleString('hu-HU') + ' Ft', 350, yPos, { continued: true })
          .text(((item.quantity || item.qty || 0) * (item.unitPrice || 0)).toLocaleString('hu-HU') + ' Ft', 450, yPos);
          yPos += 20;
    });

    // √ñsszes√≠t≈ë
    doc.moveDown();
    doc.text(`Nett√≥ √∂sszeg: ${invoice.totalNet.toLocaleString('hu-HU')} Ft`, { align: 'right' });
    doc.text(`√ÅFA (27%): ${invoice.totalVAT.toLocaleString('hu-HU')} Ft`, { align: 'right' });
    doc.text(`Brutt√≥ √∂sszeg: ${invoice.totalGross.toLocaleString('hu-HU')} Ft`, { align: 'right' });

    // Megjegyz√©s
    if (invoice.note) {
      doc.moveDown();
      doc.fontSize(12).text('Megjegyz√©s:', { underline: true });
      doc.text(invoice.note);
    }

    doc.end();
    res.status(200).send(doc).end()
  } catch (error) {
    console.error('PDF gener√°l√°s hiba:', error);
    res.status(500).json({ message: 'Hiba t√∂rt√©nt a PDF gener√°l√°s sor√°n.', error: error.message });
  }
});

// POST /invoices ‚Äì √∫j sz√°mla l√©trehoz√°sa
router.post('/invoices', authenticateJWT(), authorizeRole(['admin', 'sales']), async (req, res) => {
  try {
    const { orderId, partnerId, items, totalNet, totalVAT, totalGross, note } = req.body;

    // Ellen≈ërizz√ºk, hogy ehhez a rendel√©shez m√°r van-e sz√°mla
    const existingInvoice = await dbHandler.invoiceTable.findOne({
      where: { orderId }
    });

    if (existingInvoice) {
      return res.status(400).json({ message: 'Ehhez a rendel√©shez m√°r tartozik sz√°mla.' });
    }

    // Sz√°mlasz√°m gener√°l√°s: SZ-√â√â√â√â-00001
    const year = new Date().getFullYear();
    const lastInvoice = await dbHandler.invoiceTable.findOne({
      order: [['id', 'DESC']]
    });
    
    const nextNumber = lastInvoice ? parseInt(lastInvoice.invoiceNumber.split('-')[2]) + 1 : 1;
    const invoiceNumber = `SZ-${year}-${String(nextNumber).padStart(5, '0')}`;

    // Sz√°mla l√©trehoz√°sa
    const newInvoice = await dbHandler.invoiceTable.create({
      invoiceNumber,
      orderId,
      partnerId,
      userId: req.user.id,
      issueDate: new Date(),
      items: Array.isArray(items) ? items : [],
      totalNet: totalNet || 0,
      totalVAT: totalVAT || 0,
      totalGross: totalGross || 0,
      note: note || ''
    });

    res.status(201).json({ message: 'Sz√°mla l√©trehozva', invoice: newInvoice });
  } catch (error) {
    res.status(500).json({ message: 'Hiba a sz√°mla l√©trehoz√°sakor', error: error.message });
  }
});

module.exports = router;